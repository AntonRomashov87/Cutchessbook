import os
import logging
import asyncio
import aiohttp
import random
import json
import re
import requests
import fitz  # PyMuPDF
import schedule
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from flask import Flask, request

# =======================
# ===== –õ–æ–≥—É–≤–∞–Ω–Ω—è =======
# =======================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# =======================
# ===== Flask ===========
# =======================
app = Flask(__name__)

# =======================
# ===== –ó–º—ñ–Ω–Ω—ñ ==========
# =======================
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "-1001234567890"
TRIGGER_SECRET = os.getenv("TRIGGER_SECRET", "mysecret")

PDF_URL = os.getenv("PDF_URL")
PDF_FILE = "chess_book.pdf"
PDF_OUTPUT_FOLDER = "pdf_pages"
PDF_INDEX_FILE = "last_pdf_page.txt"

PUZZLES_URL = "https://raw.githubusercontent.com/AntonRomashov87/Chess_puzzles/main/puzzles.json"

PTB_APP = None

# =======================
# ===== –§—É–Ω–∫—Ü—ñ—ó =========
# =======================
def escape_markdown_v2(text: str) -> str:
    escape_chars = r"[_*\[\]()~`>#\+\-=|{}.!]"
    return re.sub(f'({escape_chars})', r'\\\1', text)

def get_keyboard(state: str = "start", puzzle_index: int = None):
    if state == "puzzle_sent":
        keyboard = [
            [InlineKeyboardButton("üí° –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–æ–∑–≤'—è–∑–æ–∫", callback_data=f"sol_{puzzle_index}")],
            [InlineKeyboardButton("‚ôüÔ∏è –ù–æ–≤–∞ –∑–∞–¥–∞—á–∞", callback_data="new_puzzle")]
        ]
    else:
        keyboard = [[InlineKeyboardButton("‚ôüÔ∏è –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–¥–∞—á—É", callback_data="new_puzzle")]]
    return InlineKeyboardMarkup(keyboard)

async def load_puzzles() -> list:
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(PUZZLES_URL) as resp:
                resp.raise_for_status()
                data = await resp.json()
                if isinstance(data, list):
                    logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(data)} –∑–∞–¥–∞—á")
                    return data
                else:
                    logger.error("JSON –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É.")
                    return []
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ puzzles.json: {e}")
        return []

# =======================
# ===== –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ =====
# =======================
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        escape_markdown_v2("–ü—Ä–∏–≤—ñ—Ç! –Ø —à–∞—Ö–æ–≤–∏–π –±–æ—Ç ü§ñ‚ôü\n–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤–æ—é –ø–µ—Ä—à—É –∑–∞–¥–∞—á—É:"),
        reply_markup=get_keyboard(state="start"),
        parse_mode='MarkdownV2'
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data
    puzzles_list = context.bot_data.get('puzzles', [])

    if action == "new_puzzle":
        if not puzzles_list:
            await query.edit_message_text(
                text=escape_markdown_v2("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞–¥–∞—á—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."),
                reply_markup=get_keyboard(state="start"), parse_mode='MarkdownV2'
            )
            return
        puzzle_index, puzzle = random.choice(list(enumerate(puzzles_list)))
        title = escape_markdown_v2(puzzle.get('title', '–ó–∞–¥–∞—á–∞'))
        url = escape_markdown_v2(puzzle.get('url', ''))
        msg = f"‚ôüÔ∏è *{title}*\n{url}"
        await query.edit_message_text(
            text=msg, reply_markup=get_keyboard(state="puzzle_sent", puzzle_index=puzzle_index), parse_mode='MarkdownV2'
        )
    elif action.startswith("sol_"):
        try:
            puzzle_index = int(action.split("_")[1])
            puzzle = puzzles_list[puzzle_index]
            title = escape_markdown_v2(puzzle.get('title', '–ó–∞–¥–∞—á–∞'))
            url = escape_markdown_v2(puzzle.get('url', ''))
            solution = escape_markdown_v2(puzzle.get('solution', '–†–æ–∑–≤\'—è–∑–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.'))
            msg = f"‚ôüÔ∏è *{title}*\n{url}\n\nüí° *–†–æ–∑–≤'—è–∑–æ–∫:* {solution}"
            await query.edit_message_text(
                text=msg, reply_markup=get_keyboard(state="start"), parse_mode='MarkdownV2'
            )
        except (IndexError, ValueError):
            await query.edit_message_text(
                text=escape_markdown_v2("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ü—é –∑–∞–¥–∞—á—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ—Ç—Ä–∏–º–∞–π—Ç–µ –Ω–æ–≤—É."),
                reply_markup=get_keyboard(state="start"), parse_mode='MarkdownV2'
            )

async def send_puzzle_now(chat_id: str):
    if not PTB_APP:
        logger.error("–ë–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á—ñ.")
        return
    puzzles_list = PTB_APP.bot_data.get('puzzles', [])
    if not puzzles_list:
        logger.error("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ—Ä–æ–∂–Ω—ñ–π, –Ω–µ –º–æ–∂—É –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏.")
        return
    puzzle = random.choice(puzzles_list)
    title = escape_markdown_v2(puzzle.get('title', '–ó–∞–¥–∞—á–∞'))
    url = escape_markdown_v2(puzzle.get('url', ''))
    msg = f"‚ôüÔ∏è *–©–æ–¥–µ–Ω–Ω–∞ –∑–∞–¥–∞—á–∞*\n\n*{title}*\n{url}"
    try:
        await PTB_APP.bot.send_message(chat_id=chat_id, text=msg, parse_mode='MarkdownV2')
        logger.info(f"–ó–∞–¥–∞—á—É —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–¥–∞—á—É –≤ —á–∞—Ç {chat_id}: {e}")

# =======================
# ===== PDF ============
# =======================
async def download_and_convert_pdf():
    os.makedirs(PDF_OUTPUT_FOLDER, exist_ok=True)
    if not os.path.exists(PDF_FILE):
        r = requests.get(PDF_URL)
        with open(PDF_FILE, "wb") as f:
            f.write(r.content)
        logger.info("‚úÖ PDF –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
    if not os.listdir(PDF_OUTPUT_FOLDER):
        doc = fitz.open(PDF_FILE)
        for i in range(len(doc)):
            page = doc[i]
            pix = page.get_pixmap(matrix=fitz.Matrix(2, 2))
            pix.save(f"{PDF_OUTPUT_FOLDER}/page_{i+1}.png")
        logger.info(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ {len(doc)} —Å—Ç–æ—Ä—ñ–Ω–æ–∫ PDF")

def get_last_index(file_name):
    if os.path.exists(file_name):
        with open(file_name, "r") as f:
            return int(f.read())
    return -1

def save_last_index(file_name, i):
    with open(file_name, "w") as f:
        f.write(str(i))

async def send_next_page(chat_id: str):
    if not PTB_APP:
        logger.error("–ë–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π")
        return
    pages = sorted(os.listdir(PDF_OUTPUT_FOLDER))
    if not pages:
        logger.error("–°—Ç–æ—Ä—ñ–Ω–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    last = get_last_index(PDF_INDEX_FILE)
    next_index = last + 1
    if next_index < len(pages):
        file_path = os.path.join(PDF_OUTPUT_FOLDER, pages[next_index])
        caption = f"üìñ –°—Ç–æ—Ä—ñ–Ω–∫–∞ {next_index+1}"
        try:
            await PTB_APP.bot.send_photo(chat_id=chat_id, photo=open(file_path, "rb"), caption=caption)
            save_last_index(PDF_INDEX_FILE, next_index)
            logger.info(f"‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É {next_index+1}")
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É: {e}")
    else:
        logger.info("‚úÖ –£—Å—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤–∂–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ")

# =======================
# ===== –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ =====
# =======================
def schedule_pages():
    schedule.every().tuesday.at("10:00").do(lambda: asyncio.create_task(send_next_page(CHAT_ID)))
    schedule.every().thursday.at("10:00").do(lambda: asyncio.create_task(send_next_page(CHAT_ID)))
    schedule.every().saturday.at("10:00").do(lambda: asyncio.create_task(send_next_page(CHAT_ID)))
    logger.info("‚è≥ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –∑–∞–ø—É—â–µ–Ω–æ")

async def run_schedule():
    while True:
        schedule.run_pending()
        await asyncio.sleep(30)

# =======================
# ===== Flask Routes =====
# =======================
@app.route("/webhook", methods=["POST"])
async def webhook():
    if PTB_APP:
        try:
            update_data = request.get_json()
            update = Update.de_json(update_data, PTB_APP.bot)
            await PTB_APP.process_update(update)
            return '', 200
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")
            return 'Error processing update', 500
    return 'Bot not initialized', 500

@app.route("/", methods=["GET"])
def index():
    return "–®–∞—Ö–æ–≤–∏–π –±–æ—Ç –ø—Ä–∞—Ü—é—î —á–µ—Ä–µ–∑ Webhook!", 200

@app.route("/trigger-puzzle/<secret>", methods=["POST"])
async def trigger_puzzle_sending(secret: str):
    if secret != TRIGGER_SECRET:
        return "Invalid secret", 403
    asyncio.create_task(send_puzzle_now(CHAT_ID))
    asyncio.create_task(send_next_page(CHAT_ID))
    logger.info("–†—É—á–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ç–∞ –∑–∞–¥–∞—á—ñ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞")
    return "Triggered", 200

# =======================
# ===== Setup Bot =======
# =======================
async def setup_bot():
    global PTB_APP
    PTB_APP = Application.builder().token(BOT_TOKEN).build()
    puzzles_data = await load_puzzles()
    PTB_APP.bot_data['puzzles'] = puzzles_data
    await PTB_APP.initialize()
    PTB_APP.add_handler(CommandHandler("start", start_command))
    PTB_APP.add_handler(CallbackQueryHandler(button_handler))
    await download_and_convert_pdf()
    schedule_pages()
    asyncio.create_task(run_schedule())

    # –í–µ–±—Ö—É–∫
    webhook_url = os.getenv("PUBLIC_URL")
    if webhook_url:
        try:
            await PTB_APP.bot.set_webhook(f"{webhook_url}/webhook", drop_pending_updates=True)
            logger.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}/webhook")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook: {e}")

if __name__ == "__main__":
    asyncio.run(setup_bot())
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
